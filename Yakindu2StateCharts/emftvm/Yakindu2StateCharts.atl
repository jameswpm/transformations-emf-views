-- @atlcompiler emftvm
-- @nsURI Yakindu=hu.bme.mit.inf.yakindumm
-- @nsURI Statecharts=statecharts

-- ATL Transformation for Yakindu to Statecharts
module Yakindu2StateCharts;

create OUT : Statecharts, trace: Trace from IN : Yakindu;


--  Transition to Transition
rule TransitionToTransition {
    from
        src: Yakindu!Transition
    to
        target: Statecharts!Transition (
        	target <- src.target,
			source <- src.source
        )
}

--  Vertex to StateVertex, excluding the StateChart
rule VertexToStateVertex {
    from
        src: Yakindu!Vertex (not src.isStateChart()) 
    to
        target: Statecharts!State
		
}

--  Statechart to StateMachine
rule StatechartToStateMachine {
    from
        src: Yakindu!Statechart
    to
        target: Statecharts!StateMachine(
            --top <- src.regions->iterate(r; acc: OrderedSet(Yakindu!Vertex) = OrderedSet{} | acc->union(r.vertices->asOrderedSet()))
			top <- src.regions->collect(r|r.vertices)->flatten()
		)
}



--  State to State
--rule StateToState {
--    from
 --       src: Yakindu!State
   -- to
    --    target: Statecharts!State 
--}

--  RegularState to CompositeState
-- rule RegularStateToCompositeState {
--from
--        src: Yakindu!RegularState
  --  to
    --    target: Statecharts!CompositeState 
--}


--  Exit to State
--rule ExitToState {
 --   from
  --      src: Yakindu!Exit
   -- to
    --    target: Statecharts!State 
--}

--  FinalState to State
--rule FinalStateToState {
 --   from
  --      src: Yakindu!FinalState
   -- to
    --    target: Statecharts!State 
--}

--  Transition to Transition
--rule TransitionToTransition {
 --   from
  --      src: Yakindu!Transition
   -- to
    --    target: Statecharts!Transition 
--}

helper context Yakindu!Vertex def: isStateChart(): Boolean =
	self.oclIsKindOf(Yakindu!Statechart);

--helper context Yakindu!Vertex def: hasRegions(): Boolean =
--	self.eContainer().oclIsKindOf(Yakindu!Statechart);
